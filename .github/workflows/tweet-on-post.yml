name: Tweet RSS Feed Update

on:
  schedule:
    - cron: '0 * * * *'
  workflow_dispatch:

jobs:
  tweet:
    name: Tweet when new blog post is found
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Get XML and post
      run: |
        RSS_FEED_URL="https://leosmith.wtf/rss/blog.xml"
        RSS_FEED_CONTENT=$(curl -s $RSS_FEED_URL)

        # Extract the latest item from the RSS feed
        LATEST_ITEM=$(grep -oP '<item>.*?</item>' <<< "$RSS_FEED_CONTENT" | head -n 1)

        # Extract title, link, and description using Bash pattern matching
        [[ $LATEST_ITEM =~ '<title>(.*?)<\/title>' ]] && LATEST_TITLE="${BASH_REMATCH[1]}"
        [[ $LATEST_ITEM =~ '<link>(.*?)<\/link>' ]] && LATEST_LINK="${BASH_REMATCH[1]}"
        [[ $LATEST_ITEM =~ '<description>(.*?)<\/description>' ]] && LATEST_DESCRIPTION="${BASH_REMATCH[1]}"

        # Set environment variables directly
        echo "LATEST_TITLE=${LATEST_TITLE}" >> $GITHUB_ENV
        echo "LATEST_LINK=${LATEST_LINK}" >> $GITHUB_ENV
        echo "LATEST_DESCRIPTION=${LATEST_DESCRIPTION}" >> $GITHUB_ENV

        # Check if the previous_state environment variable exists
        if [ -z "$PREVIOUS_STATE" ]; then
          # If not, initialize it with an empty value
          echo "PREVIOUS_STATE=" >> $GITHUB_ENV
        fi

        # Check if there is an update
        if [ "$PREVIOUS_STATE" != "$LATEST_LINK" ]; then
          echo "Updates found!"

          # Update the previous state
          echo "PREVIOUS_STATE=${LATEST_LINK}" >> $GITHUB_ENV

          # Tweet the content
          echo "New Blog Post: $LATEST_TITLE - $LATEST_DESCRIPTION $LATEST_LINK" | \


